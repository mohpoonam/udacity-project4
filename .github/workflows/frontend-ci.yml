name: Frontend Continuous Integration
on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
    branches:
      - 'main'
jobs:
  LINT:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: starter/frontend
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

    - name: Cache action to restore cache
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-   
    
    - name: Install dependencies
      run: |
        npm ci

    - name: Run lint
      run: |
        npm run lint
  
  TEST:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: starter/frontend
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

    - name: Cache action to restore cache
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-   
    
    - name: Install dependencies
      run: |
        npm ci

    - name: Run tests
      run: 
        npm test
  
  BUILD:
    runs-on: ubuntu-latest
    needs: [LINT, TEST]
    defaults:
      run:
        shell: bash
        working-directory: starter/frontend
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

    - name: Cache action to restore cache
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-   
    
    - name: Install dependencies      
      run: 
        npm ci
    
    - name: Docker Build
      run: 
        docker build -t mp-frontend:latest . --build-arg REACT_APP_MOVIE_API_URL="reactMovieURL"